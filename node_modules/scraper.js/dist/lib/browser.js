'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require('selenium-webdriver');

var _seleniumWebdriver2 = _interopRequireDefault(_seleniumWebdriver);

var _getSourceForModule = require('./getSourceForModule.js');

var _getSourceForModule2 = _interopRequireDefault(_getSourceForModule);

var _wrapFunctionWithBabelHelpers = require('./wrapFunctionWithBabelHelpers.js');

var _wrapFunctionWithBabelHelpers2 = _interopRequireDefault(_wrapFunctionWithBabelHelpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// const { By, until } = webdriver;

var getNewBrowser = function getNewBrowser() {
  return _seleniumWebdriver2.default.promise.createFlow(function (controlFlow) {
    return new _seleniumWebdriver2.default.Builder().setControlFlow(controlFlow).forBrowser('chrome').build();
  });
};

var Browser = function () {
  function Browser(driver) {
    _classCallCheck(this, Browser);

    this.driver = driver;
  }

  _createClass(Browser, [{
    key: 'navigate',
    value: function navigate(url) {
      this.driver.get(url);
    }
  }, {
    key: 'injectJQuery',
    value: function injectJQuery() {
      this.driver.executeScript((0, _getSourceForModule2.default)('jquery'));
    }
  }, {
    key: 'runInContextOfJquery',
    value: function runInContextOfJquery(origFn) {
      var fn = (0, _wrapFunctionWithBabelHelpers2.default)(origFn);
      var runTheFunction = function runTheFunction(userFnStr, callback) {
        var queueItems = [];
        var dataItems = [];

        var fnFromString = function fnFromString(fnStr) {
          var _fnStr$match = fnStr.match(/^function[^(]*\(([^)]*)\) {((?:.|\s)*)}$/);

          var _fnStr$match2 = _slicedToArray(_fnStr$match, 3);

          var args = _fnStr$match2[1];
          var body = _fnStr$match2[2];

          return new Function(args.split(','), body); // eslint-disable-line no-new-func
        };

        fnFromString(userFnStr).call(null, {
          $: jQuery, // eslint-disable-line no-undef
          queue: function queue() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            queueItems.push(args);
          },
          data: function data() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            dataItems.push(args);
          }
        }); // eslint-disable-line no-undef

        callback({
          queue: queueItems,
          data: dataItems,
          finalUrl: window.location.href
        });
      };

      return this.driver.executeAsyncScript((0, _wrapFunctionWithBabelHelpers2.default)(runTheFunction), fn.toString());
    }
  }, {
    key: 'quit',
    value: function quit() {
      this.driver.quit();
    }
  }]);

  return Browser;
}();

exports.default = function () {
  return getNewBrowser().then(function (driver) {
    return new Browser(driver);
  });
};