#!/usr/bin/env node
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _fp = require('lodash/fp');

var _fp2 = _interopRequireDefault(_fp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _browser = require('./lib/browser.js');

var _browser2 = _interopRequireDefault(_browser);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _getScrapers = require('./getScrapers.js');

var _getScrapers2 = _interopRequireDefault(_getScrapers);

var _processItem = require('./processItem.js');

var _processItem2 = _interopRequireDefault(_processItem);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _requireES = require('./lib/requireES6.js');

var _requireES2 = _interopRequireDefault(_requireES);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

_commander2.default.version(require('../package.json').version).option('-q, --queue <file>', 'Use this queue plugin [memory]').option('-d, --data <file>', 'Use this data plugin').option('-c, --cache <file>', 'Use this url cache provider').parse(process.argv);

if (!_commander2.default.queue || !_commander2.default.data || !_commander2.default.cache) {
  _commander2.default.help();
}

var dataPlugin = (0, _requireES2.default)(_path2.default.resolve(_commander2.default.data));
var queuePlugin = (0, _requireES2.default)(_path2.default.resolve(_commander2.default.queue));
var cachePlugin = (0, _requireES2.default)(_path2.default.resolve(_commander2.default.cache));

_bluebird2.default.promisifyAll(_fs2.default);

function startQueue(scraper) {
  var scraperLog = (0, _debug2.default)('scraperjs:' + scraper.name);
  var scraperQueue = queuePlugin('scraperjs:' + scraper.name);

  scraperLog('queue starting');

  var queueIt = function queueIt(queueItem, options) {
    return cachePlugin.get(queueItem.url).then(function (value) {
      var setCache = function setCache() {
        return cachePlugin.set(queueItem.url, true, scraper.timeBetween);
      };
      if (value === null) {
        scraperLog('adding ', queueItem);
        return scraperQueue.add({
          url: queueItem.url,
          method: queueItem.method
        }, options).then(setCache);
      }

      scraperLog('skipping ', queueItem.url);
      return setCache();
    });
  };

  queueIt(scraper.start);

  (0, _browser2.default)().then(function (browser) {
    scraperLog('browser process started');
    scraperQueue.process(function (queueItem, done) {
      scraperLog('process', queueItem.url);
      return (0, _processItem2.default)(browser, queueItem.url, scraper[queueItem.method]).then(function (_ref) {
        var queue = _ref.queue;
        var data = _ref.data;
        var finalUrl = _ref.finalUrl;

        scraperLog('finished', queueItem.url);
        var promises = [queue.map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 3);

          var url = _ref3[0];
          var method = _ref3[1];
          var options = _ref3[2];
          return [{ url: url, method: method }, options];
        }).map(function (args) {
          return queueIt.apply(undefined, _toConsumableArray(args));
        })];

        if (data.length) {
          promises.push(dataPlugin({
            url: queueItem.url,
            finalUrl: finalUrl,
            method: queueItem.method,
            scraper: scraper.name,
            timestamp: +new Date(),
            data: data.length === 1 ? data[0][0] : data.map(function (x) {
              return x[0];
            })
          }));
        }

        return _bluebird2.default.all(promises);
      }).then(function () {
        scraperLog('done this!');
        done();
      }).catch(function (err) {
        console.error('error!', err);
        throw err;
      });
    });
  });
}

(0, _getScrapers2.default)(_commander2.default.args).then(_fp2.default.forEach(startQueue));